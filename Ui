
local Library = {}
local TweenService = game:GetService("TweenService")
local UIS = game:GetService("UserInputService")
local Players = game:GetService("Players")

local function CreateElement(elementType, parent, properties)
    local element = Instance.new(elementType)
    for prop, value in pairs(properties) do
        element[prop] = value
    end
    element.Parent = parent
    return element
end

-- Dragging Functionality
function Library:EnableDragging(frame)
    local dragging, dragStart, startPos
    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Window Function (Creates and returns a window for the UI)
function Library:Window(title)
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "UILibrary"
    screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    
    -- Main Frame (Draggable UI window container)
    local mainFrame = CreateElement("Frame", screenGui, {
        Size = UDim2.new(0, 500, 0, 400),
        Position = UDim2.new(0.25, 0, 0.25, 0),
        BackgroundColor3 = Color3.fromRGB(34, 34, 41),  -- Dark background
        BorderColor3 = Color3.fromRGB(60, 60, 60),  -- Subtle border
        BorderSizePixel = 2
    })
    Library:EnableDragging(mainFrame)

    -- Top Bar (Title Header)
    local topBar = CreateElement("Frame", mainFrame, {
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(25, 25, 35),  -- Dark header
        BorderColor3 = Color3.fromRGB(0, 0, 0),
        BorderSizePixel = 0
    })
    
    -- Title Text on the top bar
    CreateElement("TextLabel", topBar, {
        Text = title,
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSansBold,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(255, 255, 255)
    })

    -- Folder to hold tabs
    local tabsFolder = Instance.new("Folder", mainFrame)
    tabsFolder.Name = "Tabs"

    return {
        CreateTab = function(self, tabName)
            return Library:CreateTab(tabsFolder, tabName)
        end
    }
end

-- Creating Tab Function (used in the window)
function Library:CreateTab(parent, tabName)
    -- Scrollable container for each tab
    local tabFrame = CreateElement("ScrollingFrame", parent, {
        Size = UDim2.new(1, -10, 1, -40),
        Position = UDim2.new(0, 5, 0, 35),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = Color3.fromRGB(45, 45, 55),
        ScrollBarThickness = 6,
        Visible = false
    })
    CreateElement("UIListLayout", tabFrame, {Padding = UDim.new(0, 5)})

    return {
        -- Show the tab when activated
        Show = function(self)
            for _, tab in pairs(parent:GetChildren()) do
                if tab:IsA("ScrollingFrame") then
                    tab.Visible = false
                end
            end
            tabFrame.Visible = true
        end,

        -- Create a button in the tab
        CreateButton = function(self, buttonText, callback)
            return Library:CreateButton(tabFrame, buttonText, callback)
        end,

        -- Create a label in the tab
        CreateLabel = function(self, labelText)
            return Library:CreateLabel(tabFrame, labelText)
        end,
        
        -- Divider to separate sections
        CreateDivider = function(self, dividerText)
            return Library:CreateDivider(tabFrame, dividerText)
        end,

        -- Toggle (button state change)
        CreateToggle = function(self, toggleText, callback)
            return Library:CreateToggle(tabFrame, toggleText, callback)
        end,

        -- Slider
        CreateSlider = function(self, sliderText, min, max, callback)
            return Library:CreateSlider(tabFrame, sliderText, min, max, callback)
        end
    }
end

-- Button creation with styles and event callbacks
function Library:CreateButton(parent, buttonText, callback)
    local button = CreateElement("TextButton", parent, {
        Text = buttonText,
        Size = UDim2.new(0.9, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(60, 60, 70),  -- Slightly lighter
        Font = Enum.Font.SourceSansBold,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(255, 255, 255)
    })

    -- Adding corner radius for rounded buttons
    CreateElement("UICorner", button, {CornerRadius = UDim.new(0, 6)})

    -- Add event to fire callback when clicked
    if callback then
        button.MouseButton1Click:Connect(callback)
    end
    return button
end

-- Label function to add plain text labels
function Library:CreateLabel(parent, labelText)
    return CreateElement("TextLabel", parent, {
        Text = labelText,
        Size = UDim2.new(0.9, 0, 0, 30),
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        TextSize = 16,
        TextColor3 = Color3.fromRGB(255, 255, 255)
    })
end

-- Divider function to add visual separations
function Library:CreateDivider(parent, dividerText)
    local divider = CreateElement("Frame", parent, {
        Size = UDim2.new(0.9, 0, 0, 2),
        BackgroundColor3 = Color3.fromRGB(150, 150, 150),
    })

    -- Divider text near to the separator line
    CreateElement("TextLabel", parent, {
        Text = dividerText,
        Size = UDim2.new(0.9, 0, 0, 20),
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        TextSize = 14,
        TextColor3 = Color3.fromRGB(150, 150, 150)
    }).Position = UDim2.new(0, 10, 0, -12)
end

-- Toggle switch to allow state change (on/off)
function Library:CreateToggle(parent, toggleText, callback)
    local toggle = CreateElement("TextButton", parent, {
        Text = toggleText,
        Size = UDim2.new(0.9, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(60, 60, 70),
        Font = Enum.Font.SourceSansBold,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(255, 255, 255)
    })

    local state = false
    toggle.MouseButton1Click:Connect(function()
        state = not state
        toggle.Text = toggleText .. " : " .. (state and "On" or "Off")
        if callback then
            callback(state)
        end
    end)
    return toggle
end

-- Slider creation for numerical input
function Library:CreateSlider(parent, sliderText, min, max, callback)
    local sliderFrame = CreateElement("Frame", parent, {
        Size = UDim2.new(0.9, 0, 0, 40),
        BackgroundColor3 = Color3.fromRGB(55, 55, 65)
    })

    local sliderLabel = CreateElement("TextLabel", sliderFrame, {
        Text = sliderText,
        Size = UDim2.new(0.8, 0, 0, 20),
        BackgroundTransparency = 1,
        Font = Enum.Font.SourceSans,
        TextSize = 18,
        TextColor3 = Color3.fromRGB(255, 255, 255)
    })

    return sliderFrame
end

return Library
